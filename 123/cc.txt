<?php
/**
 * 加盟商系统 - v1.0
 * * 公司登录相关
 * @author phpzzy <phpzzy@qq.com>
 */

namespace CompanyApi\Controller;

use LgCommon\Controller\CommonController;

class LoginController extends CommonController
{
    /**
     * 公司后台管理 - 根据账户获取可选公司
     * @author Sunyh
     */
    public function accountAuthCompany()
    {
        $log_title = '公司后台 => 根据账户获取权限公司，';
        $act_key = 'GetCompanyByAccount'; //md5(SIGN_KEY_PREFIX . '_' . $act_key) = 'fcba733a0247057a1b3c4eda24548935'
        CommonController::logText($log_title . 'START，加密数据：' . $this->ENCRYPT_STR);
        try {
            //事务开启
            M()->startTrans();

            $params_need = ['sign_key', 'user_cate', 'u_phone'];
            //必需参数不能为空+验证签名
            $res_head = $this->apiHead($act_key, $params_need, $log_title);
            if (1 !== (int)$res_head['state']) {
                CommonController::logText($log_title . 'ERROR，必需参数检查异常，MSG：' . $res_head['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '必需参数检查异常，MSG：' . $res_head['msg']);
            }

            //正则验证必需参数
            $params_need_check = [
                'u_phone' => [
                    'label' => '手机号', //显示文本
                    'filter' => '/^1[3456789]\d{9}$/', //验证正则表达式
                ]
            ];
            $res_chk_params = params_filter($this->DECRYPT_ARR, $params_need_check);
            if (1 !== $res_chk_params['state']) {
                CommonController::logText($log_title . 'ERROR，参数检查不通过，MSG：' . $res_chk_params['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '参数检查不通过，MSG：' . $res_chk_params['msg']);
            }

            $u_cate = $this->DECRYPT_ARR['user_cate'];
            $u_phone = $this->DECRYPT_ARR['u_phone'];

            //手机号是否存在
            $user_exist = M('company_users')->where(['user_name' => $u_phone])->field('id,state')->find();
            if(!(0 < count($user_exist))){
                CommonController::logText($log_title . 'END，手机号不存在，SQL：' . M()->getLastSql());
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '手机号不存在', 're_login' => true]);
            }
            if($user_exist['state'] != 1){
                CommonController::logText($log_title . 'END，手机号不可用，SQL：' . M()->getLastSql());
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '手机号不可用', 're_login' => true]);
            }

            $field_info = 'l_cp.access_str';
            $user_access_info = M('company_users l_cu')
                ->field( $field_info )
                ->join('LEFT JOIN lg_company_position l_cp ON l_cu.user_position_id = l_cp.id AND l_cp.state = 1')
                ->where(['l_cu.user_name' => $u_phone,'l_cu.state' => 1])
                ->find();

            if(empty($user_access_info['access_str'])){
                CommonController::logText($log_title . 'END，此账户未分配权限，SQL：' . M()->getLastSql());
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '此账户未分配权限', 're_login' => true]);
            }

            $access_arr = explode('|', $user_access_info['access_str']);
            $company_id_arr = [];
            foreach ( $access_arr as $value ){
                $company_id = substr($value,0,strpos($value, '(')); //   1(1,2,3,9)|2(1,2,3,4,5)
                array_push( $company_id_arr, $company_id);
            }

            if(empty($company_id_arr)){
                CommonController::logText($log_title . 'END，此账户分配权限错误，SQL：' . M()->getLastSql());
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '此账户分配权限错误', 're_login' => true]);
            }

            $user_company_info = M('company_info')
                ->field( 'id as company_id, company_name' )
                ->where(['id' => array('in',$company_id_arr),'state' => 1])
                ->select();

            if(empty($user_company_info)){
                CommonController::logText($log_title . 'END，此账户所分配公司已冻结或不存在，SQL：' . M()->getLastSql());
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '此账户所分配公司已冻结或不存在', 're_login' => true]);
            }

            M()->commit();
            $ret_data = [
                'state' => 1,
                'company_info' => $user_company_info
            ];
            $this->encryptReturn($ret_data);

        } catch (\Exception $e) {
            CommonController::logText($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage());
            CommonController::catchErrLog($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage() . '【 ERROR_TRACE_INFO => ' . $e->getTraceAsString() . ' 】');
            M()->rollback();
            //发送提醒邮件
            send_mail($this->SERVER_ERR_MAIL_TO, $log_title . '代码异常', 'METHOD：' . __METHOD__ . '，TRACE_MESSAGE：' . $e->getMessage() . '，TRACE_INFO：' . $e->getTraceAsString());
            $this->encryptReturn($this->ERR_ARR['SERVER_ERROR'], 'CATCH_ERROR => ' . $e->getMessage());
        }
    }

    /**
     * 获取短信验证码 - 公司
     * Author: Sunyh
     * * 1新建，2登录
     * @return bool|mixed|string
     */
    public function getSmsCode()
    {
        $log_title = '公司后台 => 获取短信验证码，';
        $act_key = 'doGetVCode'; //md5(SIGN_KEY_PREFIX . '_' . $act_key) = 'fd2ef3a80dca3634825228fd395acd0c'
        CommonController::logText($log_title . 'START，加密数据：' . $this->ENCRYPT_STR);

        try {
            //事务开启
            M()->startTrans();

            $params_need = ['sign_key', 'user_cate', 'sms_phone'];
            //必需参数不能为空+验证签名
            $res_head = $this->apiHead($act_key, $params_need, $log_title);
            if (1 !== (int)$res_head['state']) {
                CommonController::logText($log_title . 'ERROR，必需参数检查异常，MSG：' . $res_head['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '必需参数检查异常，MSG：' . $res_head['msg']);
            }

            //正则验证必需参数
            $params_need_check = [
                'sms_phone' => [
                    'label' => '手机号', //显示文本
                    'filter' => '/^1[3456789]\d{9}$/', //验证正则表达式
                ]
            ];
            $res_chk_params = params_filter($this->DECRYPT_ARR, $params_need_check);
            if (1 !== $res_chk_params['state']) {
                CommonController::logText($log_title . 'ERROR，参数检查不通过，MSG：' . $res_chk_params['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '参数检查不通过，MSG：' . $res_chk_params['msg']);
            }

            $u_phone = $this->DECRYPT_ARR['sms_phone'];
            $user_cate =  $this->DECRYPT_ARR['user_cate'];
            $app_source =  $this->DECRYPT_ARR['app_source'];

            $v_code = mt_rand(1000, 9999);
            $send_arr = [
                'code' => $v_code,
                'product' => '运帮加盟',
            ];

            //手机号是否存在
            $user_exist = M('company_users')->where(['user_name' => $u_phone])->field('id,state')->find();
            if(!(0 < count($user_exist))){
                CommonController::logText($log_title . 'END，手机号不存在，SQL：' . M()->getLastSql());
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '手机号不存在', 're_login' => true]);
            }
            if($user_exist['state'] != 1){
                CommonController::logText($log_title . 'END，手机号不可用，SQL：' . M()->getLastSql());
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '手机号不可用', 're_login' => true]);
            }

            //该号码所有未失效验证码置为失效
            $res_upd_sms_state = M('all_sms_code')->where(['phone' => $u_phone, 'state' => 1])->setField('state', 2);
            if (false === $res_upd_sms_state) {
                //
            }

            //step1：向all_sms_code表添加记录
            $data_log = [
                'to_phone' => $u_phone,
                'app_source_id' => $app_source,
                'app_source_name' => '公司后台',
                'user_cate' => $user_cate,
                'sms_code' => $v_code,
                'add_time' => $this->FORMAT_TIME_NOW,
                'invalid_time' =>  date('Y-m-d H:i:s', $this->TIME_NOW + $this->SMS_CODE_LIVE_TIME),
                'state' => 1
            ];
            $res_add_sms = M('all_sms_code')->add($data_log);
            if (!(0 < $res_add_sms)) {
                CommonController::logText($log_title . 'END，ERROR，验证码发送失败，SQL：' . M()->getLastSql());
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '验证码发送失败']);
            }

            //step2：第三方接口发送短信
            $res_sms = ali_send_sms(5, $u_phone, $send_arr ,'公司后台');

            if (1 !== $res_sms['state']) {
                CommonController::logText($log_title . 'END，ERROR，验证码发送结果：' . json_encode($res_sms));
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '验证码发送失败']);
            }
            CommonController::logText($log_title . 'END，SUCCESS，V_CODE：' . $v_code);
            M()->commit();
            $this->encryptReturn(['state' => 1, 'msg' => 'success']);

        } catch (\Exception $e) {
            CommonController::logText($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage());
            CommonController::catchErrLog($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage() . '【 ERROR_TRACE_INFO => ' . $e->getTraceAsString() . ' 】');
            M()->rollback();
            //发送提醒邮件
            send_mail($this->SERVER_ERR_MAIL_TO, $log_title . '代码异常', 'METHOD：' . __METHOD__ . '，TRACE_MESSAGE：' . $e->getMessage() . '，TRACE_INFO：' . $e->getTraceAsString());
            $this->encryptReturn($this->ERR_ARR['SERVER_ERROR'], 'CATCH_ERROR => ' . $e->getMessage());
        }
    }

    /**
     * 公司后台管理 - 账号+验证码登录
     * @author Sunyh
     */
    public function companyPhoneCodeLogin()
    {
        $log_title = '公司后台 => 账号+密码登录，';
        $act_key = 'doLoginCompanyByPhoneCode'; //md5(SIGN_KEY_PREFIX . '_' . $act_key) = '8d3777c1fbed8c499a74831f41669622'
        CommonController::logText($log_title . 'START，加密数据：' . $this->ENCRYPT_STR);
        try {

            //事务开启
            M()->startTrans();
            CommonController::logText($log_title . 'START，输入参数：' . json_encode( $this->DECRYPT_ARR ));

            //正则验证必需参数
            $params_need_check = [
                'u_phone' => [
                    'label' => '手机号', //显示文本
                    'filter' => '/^1[3456789]\d{9}$/', //验证正则表达式
                ],
                'v_code'=>[
                    'label' => '验证码',
                    'filter' => '/^\d{4}$/'
                ]
            ];

            //必需参数不能为空+验证签名
            $params_need = ['sign_key', 'user_cate', 'u_phone', 'v_code' , 'c_id'];
            $res_head = $this->apiHead($act_key, $params_need, $log_title);
            if (1 !== (int)$res_head['state']) {
                CommonController::logText($log_title . 'ERROR，必需参数检查异常，MSG：' . $res_head['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '必需参数检查异常，MSG：' . $res_head['msg']);
            }

            //正则验证数据
            $res_chk_params = params_filter($this->DECRYPT_ARR, $params_need_check);
            if (1 !== $res_chk_params['state']) {
                CommonController::logText($log_title . 'ERROR，参数检查不通过，MSG：' . $res_chk_params['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '参数检查不通过，MSG：' . $res_chk_params['msg']);
            }

            $u_cate = $this->DECRYPT_ARR['user_cate'];
            $u_phone = $this->DECRYPT_ARR['u_phone'];
            $u_pwd = $this->DECRYPT_ARR['u_pwd'];
            $c_id = $this->DECRYPT_ARR['c_id'];



            $user_info = $this->chkUser($act_key, 2, $log_title, false);

            if (1 != $user_info['state']) {
                CommonController::logText($log_title . 'ERROR，参数异常，MSG：' . $user_info['msg']);
                $this->encryptReturn(['state' => 0,  'msg' => '数据异常']);
            }

            $ret_data = [
                'state' => 1,
                'user_token' => $user_info['user_token'],
                'c_id' => $user_info['company_id'],
                'login_time' => $this->TIME_NOW
            ];
            CommonController::logText($log_title . 'SUCCESS，USER_TOKEN：' . $user_info['user_token'] . '，LOGIN_TIME：' . $this->TIME_NOW . '[' . $this->FORMAT_TIME_NOW . ']');

            $this->encryptReturn($ret_data);
        } catch (\Exception $e) {
            CommonController::logText($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage());
            CommonController::catchErrLog($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage() . '【 ERROR_TRACE_INFO => ' . $e->getTraceAsString() . ' 】');
            M()->rollback();
            //发送提醒邮件
            send_mail($this->SERVER_ERR_MAIL_TO, $log_title . '代码异常', 'METHOD：' . __METHOD__ . '，TRACE_MESSAGE：' . $e->getMessage() . '，TRACE_INFO：' . $e->getTraceAsString());
            $this->encryptReturn($this->ERR_ARR['SERVER_ERROR'], 'CATCH_ERROR => ' . $e->getMessage());
        }
    }

    /**
     * 公司后台管理 - 账号+密码登录
     * @author Sunyh
     */
    public function companyPwdLogin()
    {
        $log_title = '公司后台 => 账号+密码登录，';
        $act_key = 'PwdLoginForCompany'; //md5(SIGN_KEY_PREFIX . '_' . $act_key) = 'e1329418be44365b806cade80e9eaff7'
        CommonController::logText($log_title . 'START，加密数据：' . $this->ENCRYPT_STR);
        try {
            //事务开启
            M()->startTrans();
            CommonController::logText($log_title . 'START，输入参数：' . json_encode( $this->DECRYPT_ARR ));

            //正则验证必需参数
            $params_need_check = [
                'u_phone' => [
                    'label' => '手机号', //显示文本
                    'filter' => '/^1[3456789]\d{9}$/', //验证正则表达式
                ],
                'u_pwd'=>[
                    'label'=>'登录密码',
                    'filter'=>'/^[0-9a-zA-Z]{32}$/',
                ]
            ];

            //必需参数不能为空+验证签名
            $params_need = ['sign_key', 'user_cate', 'u_phone', 'u_pwd' ,'c_id'];
            $res_head = $this->apiHead($act_key, $params_need, $log_title);
            if (1 !== (int)$res_head['state']) {
                CommonController::logText($log_title . 'ERROR，必需参数检查异常，MSG：' . $res_head['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '必需参数检查异常，MSG：' . $res_head['msg']);
            }

            //正则验证数据
            $res_chk_params = params_filter($this->DECRYPT_ARR, $params_need_check);
            if (1 !== $res_chk_params['state']) {
                CommonController::logText($log_title . 'ERROR，参数检查不通过，MSG：' . $res_chk_params['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '参数检查不通过，MSG：' . $res_chk_params['msg']);
            }

            $u_cate = $this->DECRYPT_ARR['user_cate'];
            $u_phone = $this->DECRYPT_ARR['u_phone'];
            $u_pwd = $this->DECRYPT_ARR['u_pwd'];
            $c_id = $this->DECRYPT_ARR['c_id'];


            $user_info = $this->chkUser($act_key, 1, $log_title, false);

            if (1 != $user_info['state']) {
                CommonController::logText($log_title . 'ERROR，参数异常，MSG：' . $user_info['msg']);
                $this->encryptReturn(['state' => 0,  'msg' => '数据异常']);
            }

            $ret_data = [
                'state' => 1,
                'user_token' => $user_info['user_token'],
                'c_id' => $user_info['company_id'],
                'login_time' => $this->TIME_NOW
            ];
            CommonController::logText($log_title . 'SUCCESS，USER_TOKEN：' . $user_info['user_token'] . '，LOGIN_TIME：' . $this->TIME_NOW . '[' . $this->FORMAT_TIME_NOW . ']');
            $this->encryptReturn($ret_data);

        } catch (\Exception $e) {
            CommonController::logText($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage());
            CommonController::catchErrLog($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage() . '【 ERROR_TRACE_INFO => ' . $e->getTraceAsString() . ' 】');
            M()->rollback();
            //发送提醒邮件
            send_mail($this->SERVER_ERR_MAIL_TO, $log_title . '代码异常', 'METHOD：' . __METHOD__ . '，TRACE_MESSAGE：' . $e->getMessage() . '，TRACE_INFO：' . $e->getTraceAsString());
            $this->encryptReturn($this->ERR_ARR['SERVER_ERROR'], 'CATCH_ERROR => ' . $e->getMessage());
        }
    }

    /**
     * 公司后台管理 - 重置登录密码前验证
     * @author Sunyh
     */
    public function oldPwdCheck()
    {
        $log_title = '公司后台 => 重置登录密码前验证，';
        $act_key = 'doCheckOldPwd'; //md5(SIGN_KEY_PREFIX . '_' . $act_key) = 'a55e6d8c78a7b0e2183fcd122c6a8e43'
        CommonController::logText($log_title . 'START，加密数据：' . $this->ENCRYPT_STR);

        try {
            //事务开启
            M()->startTrans();

            $params_need = ['sign_key', 'user_cate', 'u_token', 'old_pwd', 'new_pwd', 'repeat_pwd'];

            //必需参数不能为空+验证签名
            $res_head = $this->apiHead($act_key, $params_need, $log_title);
            if (1 !== (int)$res_head['state']) {
                CommonController::logText($log_title . 'ERROR，必需参数检查异常，MSG：' . $res_head['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '必需参数检查异常，MSG：' . $res_head['msg']);
            }

            //正则验证必需参数
            $params_need_check = [
                'old_pwd'=>[
                    'label'=>'原密码',
                    'filter'=>'/^[0-9a-zA-Z]{32}$/'
                ],
                'new_pwd'=>[
                    'label'=>'新密码',
                    'filter'=>'/^[0-9a-zA-Z]{32}$/'
                ],
                'repeat_pwd'=>[
                    'label'=>'重复新密码',
                    'filter'=>'/^[0-9a-zA-Z]{32}$/'
                ]

            ];

            //正则验证数据
            $res_chk_params = params_filter($this->DECRYPT_ARR, $params_need_check);
            if (1 !== $res_chk_params['state']) {
                CommonController::logText($log_title . 'ERROR，参数检查不通过，MSG：' . $res_chk_params['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '参数检查不通过，MSG：' . $res_chk_params['msg']);
            }

            $u_token = $this->DECRYPT_ARR['u_token'];
            $old_pwd = $this->DECRYPT_ARR['old_pwd'];
            $new_pwd = $this->DECRYPT_ARR['new_pwd'];
            $repeat_pwd = $this->DECRYPT_ARR['repeat_pwd'];

            $chk_user_arr = $this->checkCompanyUserByToken( $u_token, $log_title, true);

            //验证密码信息
            $tmp_pwd = md5($old_pwd . '_' . $chk_user_arr['pwd_salt']);
            if ($tmp_pwd != $chk_user_arr['user_pwd']) {
                CommonController::logText($log_title . 'END，原密码不正确');
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '原密码不正确']);
            }

            //新密码与重复密码是否相等
            if ($new_pwd !== $repeat_pwd) {
                CommonController::logText($log_title . 'END，重复密码与新密码不一致');
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '重复密码与新密码不一致']);
            }


            //生成token，存入session，用于下一步重置密码验证 - 密码重置完成后销毁、或到期自动销毁
            $validate_token = generate_token();
            S('reset_pwd_' . $chk_user_arr['user_phone'], $validate_token, $this->VALIDATION_INFO_LIVE_TIME);

            CommonController::logText($log_title . 'END，SUCCESS，RESET_PWD_TOKEN：' . $validate_token);
            M()->commit();

            $ret_data = [
                'state' => 1,
                'reset_token' => $validate_token
            ];
            $this->encryptReturn($ret_data);
        } catch (\Exception $e) {
            CommonController::logText($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage());
            CommonController::catchErrLog($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage() . '【 ERROR_TRACE_INFO => ' . $e->getTraceAsString() . ' 】');
            M()->rollback();
            //发送提醒邮件
            send_mail($this->SERVER_ERR_MAIL_TO, $log_title . '代码异常', 'METHOD：' . __METHOD__ . '，TRACE_MESSAGE：' . $e->getMessage() . '，TRACE_INFO：' . $e->getTraceAsString());
            $this->encryptReturn($this->ERR_ARR['SERVER_ERROR'], 'CATCH_ERROR => ' . $e->getMessage());
        }
    }

    /**
     * 公司后台管理 - 重置登录密码
     * @author Sunyh
     */
    public function resetLoginPwd()
    {
        $log_title = '公司后台 => 重置登录密码，';
        $act_key = 'doResetLoginPwd'; //md5(SIGN_KEY_PREFIX . '_' . $act_key) = '678958670ca79065f63e372e8d94f54d'
        CommonController::logText($log_title . 'START，加密数据：' . $this->ENCRYPT_STR);

        try {
            //事务开启
            M()->startTrans();

            $params_need = ['sign_key', 'user_cate', 'u_token', 'reset_token', 'old_pwd', 'new_pwd', 'repeat_pwd'];

            //必需参数不能为空+验证签名
            $res_head = $this->apiHead($act_key, $params_need, $log_title);
            if (1 !== (int)$res_head['state']) {
                CommonController::logText($log_title . 'ERROR，必需参数检查异常，MSG：' . $res_head['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '必需参数检查异常，MSG：' . $res_head['msg']);
            }

            //正则验证必需参数
            $params_need_check = [
                'old_pwd'=>[
                    'label'=>'原密码',
                    'filter'=>'/^[0-9a-zA-Z]{32}$/'
                ],
                'new_pwd'=>[
                    'label'=>'新密码',
                    'filter'=>'/^[0-9a-zA-Z]{32}$/'
                ],
                'repeat_pwd'=>[
                    'label'=>'重复新密码',
                    'filter'=>'/^[0-9a-zA-Z]{32}$/'
                ]

            ];

            //正则验证数据
            $res_chk_params = params_filter($this->DECRYPT_ARR, $params_need_check);
            if (1 !== $res_chk_params['state']) {
                CommonController::logText($log_title . 'ERROR，参数检查不通过，MSG：' . $res_chk_params['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['DATA_ILLEGAL'], '参数检查不通过，MSG：' . $res_chk_params['msg']);
            }

            $u_token = $this->DECRYPT_ARR['u_token'];
            $reset_token = $this->DECRYPT_ARR['reset_token'];
            $old_pwd = $this->DECRYPT_ARR['old_pwd'];
            $new_pwd = $this->DECRYPT_ARR['new_pwd'];
            $repeat_pwd = $this->DECRYPT_ARR['repeat_pwd'];

            $chk_user_arr = $this->checkCompanyUserByToken( $u_token, $log_title, true);

            //验证密码信息
            $tmp_pwd = md5($old_pwd . '_' . $chk_user_arr['pwd_salt']);
            if ($tmp_pwd != $chk_user_arr['user_pwd']) {
                CommonController::logText($log_title . 'END，原密码不正确');
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '原密码不正确']);
            }

            //新密码与重复密码是否相等
            if ($new_pwd !== $repeat_pwd) {
                CommonController::logText($log_title . 'END，重复密码与新密码不一致');
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '重复密码与新密码不一致']);
            }

            //step1：检查验证信息
            $ss_reset_token = S('reset_pwd_' . $chk_user_arr['user_phone']);

            if (!isset($ss_reset_token) || '' == $ss_reset_token) {
                CommonController::logText($log_title . 'END，ERROR，验证信息已失效，请返回上一步重新验证');
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '验证信息不正确，请返回上一步重新验证']);
            }
            if ($ss_reset_token != $reset_token) {
                CommonController::logText($log_title . 'END，ERROR，验证信息不正确，请返回上一步重新验证');
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '验证信息不正确，请返回上一步重新验证']);
            }

            //step2：重置登录密码 - 并更新token
            //更新登录信息
            $new_token = generate_company_user_token($chk_user_arr['user_phone'], $chk_user_arr['user_type']);

            $new_salt = generate_company_pwd_salt();
            $new_pwd = md5($new_pwd . '_' . $new_salt); //确保可以正常使用'记住密码'功能
            $data_upd = [
                'user_pwd' => $new_pwd,
                'pwd_salt' => $new_salt,
                'user_token' => $new_token,
                'token_last_upd_time' => $this->FORMAT_TIME_NOW,
                'last_upd_time' => $this->FORMAT_TIME_NOW
            ];
            $res_upd_user = M('company_users')->where(['id' => $chk_user_arr['id']])->save($data_upd);
            if (false === $res_upd_user) {
                CommonController::logText($log_title . 'END，重置密码更改失败，SQL：' . M()->getLastSql());
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['OPERATION_FAILED'], '重置密码更改失败，SQL：' . M()->getLastSql());
            }

            //记录日志
            $res_log = all_user_log_rec($log_title, $chk_user_arr['id'], $chk_user_arr['user_name'], $chk_user_arr['user_phone'], __METHOD__, '重置密码成功，NEW_TOKEN：' . $new_token, 2);
            if (1 !== $res_log['state']) {
                CommonController::logText($log_title . 'END，重置密码记录失败，MSG：' . $res_log['msg']);
                M()->rollback();
                $this->encryptReturn($this->ERR_ARR['OPERATION_FAILED'], '重置密码记录失败，MSG：' . $res_log['msg']);
            }


            //验证信息清除
            S('reset_pwd_' . $chk_user_arr['user_phone'], null);
            CommonController::logText($log_title . 'END，SUCCESS，成功更改登录密码，NEW_TOKEN：' . $new_token);
            M()->commit();

            $ret_data = [
                'state' => 1,
                'msg' => '重置密码成功'
            ];
            $this->encryptReturn($ret_data);
        } catch (\Exception $e) {
            CommonController::logText($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage());
            CommonController::catchErrLog($log_title . 'ERROR，CATCH_ERROR => ' . $e->getMessage() . '【 ERROR_TRACE_INFO => ' . $e->getTraceAsString() . ' 】');
            M()->rollback();
            //发送提醒邮件
            send_mail($this->SERVER_ERR_MAIL_TO, $log_title . '代码异常', 'METHOD：' . __METHOD__ . '，TRACE_MESSAGE：' . $e->getMessage() . '，TRACE_INFO：' . $e->getTraceAsString());
            $this->encryptReturn($this->ERR_ARR['SERVER_ERROR'], 'CATCH_ERROR => ' . $e->getMessage());
        }
    }


    /**
     * 登录时用户合法性和状态检查
     * @param $act_key
     * @param $check_type  int  需要检查的场景类型（1手机号+密码登录，2手机号+验证码登录）
     * @param $log_title
     * @param bool $have_trans
     * @return mixed
     * @author Sunyh
     */
    private function chkUser($act_key , $check_type,$log_title)
    {

        $u_cate = $this->DECRYPT_ARR['user_cate'];
        $u_phone = $this->DECRYPT_ARR['u_phone'];
        $u_pwd = $this->DECRYPT_ARR['u_pwd'];
        $c_id = $this->DECRYPT_ARR['c_id'];

        //手机号是否存在
        $user_info = M('company_users')->where(['user_name' => $u_phone])->field('id,state,user_type,pwd_salt,user_pwd')->find();
        if(!(0 < count($user_info))){
            CommonController::logText($log_title . 'END，手机号不存在，SQL：' . M()->getLastSql());
            M()->rollback();
            $this->encryptReturn(['state' => 0, 'msg' => '手机号不存在', 're_login' => true]);
        }
        if($user_info['state'] != 1){
            CommonController::logText($log_title . 'END，手机号不可用，SQL：' . M()->getLastSql());
            M()->rollback();
            $this->encryptReturn(['state' => 0, 'msg' => '手机号不可用', 're_login' => true]);
        }

        //锁用户信息
        $lock_user = M()->query('SELECT * FROM lg_company_users WHERE user_name = "' . $u_phone . '" AND state = 1 FOR UPDATE');
        if (!(0 < count($lock_user))) {
            CommonController::logText($log_title . 'END，ERROR，用户信息加锁失败，SQL：' . M()->getLastSql());
            M()->rollback();
            $this->encryptReturn(['state' => 0, 'msg' => '账号异常', 're_login' => true]);
        }

        $field_info = 'l_cp.access_str';
        $user_access_info = M('company_users l_cu')
            ->field( $field_info )
            ->join('LEFT JOIN lg_company_position l_cp ON l_cu.user_position_id = l_cp.id AND l_cp.state = 1')
            ->where(['l_cu.user_name' => $u_phone,'l_cu.state' => 1])
            ->find();

        if(empty($user_access_info['access_str'])){
            CommonController::logText($log_title . 'END，此账户未分配权限，SQL：' . M()->getLastSql());
            M()->rollback();
            $this->encryptReturn(['state' => 0, 'msg' => '此账户未分配权限', 're_login' => true]);
        }

        $user_company_info = M('company_info')->field( 'id as company_id, company_name' )->where(['id' => $c_id, 'state' => 1])->find();
        if(empty($user_company_info)){
            CommonController::logText($log_title . 'END，所选择公司已冻结或不存在，SQL：' . M()->getLastSql());
            M()->rollback();
            $this->encryptReturn(['state' => 0, 'msg' => '所选择公司已冻结或不存在', 're_login' => true]);
        }

        //密码登录检查
        if(1==$check_type){//手机号+密码登录
            $tmp_pwd = md5($u_pwd . '_' . $user_info['pwd_salt']);
            if ($tmp_pwd != $user_info['user_pwd']) {
                CommonController::logText($log_title . 'END，登录密码不正确');
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => '登录密码不正确', 're_login' => true]);
            }
        //验证码登录检查
        }elseif(2==$check_type){//手机号+验证码登录

            $res_code_chk = $this->company_v_code_check( $this->DECRYPT_ARR['u_phone'] , $this->DECRYPT_ARR['v_code']);
            if (1 !== $res_code_chk['state']) {
                CommonController::logText($log_title . 'END，ERROR，验证码检查结果：' . json_encode($res_code_chk));
                M()->rollback();
                $this->encryptReturn(['state' => 0, 'msg' => $res_code_chk['msg'], 're_login' => true]);
            }
        }else{
            CommonController::logText($log_title.'END,ERROR,检查类型错误，check_type:'.$check_type);
            M()->rollback();
            $this->encryptReturn(['state' => 0,  'msg' => '数据异常']);
        }

        //更新登录信息
        $new_token = generate_company_user_token($u_phone, $user_info['user_type']);
        $user_info['user_token'] = $new_token;

        $new_salt = generate_company_pwd_salt();
        $new_pwd = md5($u_pwd . '_' . $new_salt); //确保可以正常使用'记住密码'功能
        $data_upd = [
            'user_pwd' => $new_pwd,
            'pwd_salt' => $new_salt,
            'user_token' => $new_token,
            'token_last_upd_time' => $this->FORMAT_TIME_NOW,
            'last_login_time' => $this->FORMAT_TIME_NOW,
            'last_login_ip' => CommonController::$CLIENT_IP
        ];
        $res_upd_user = M('company_users')->where(['id' => $user_info['id']])->save($data_upd);
        if (false === $res_upd_user) {
            CommonController::logText($log_title . 'END，登录信息更改失败，SQL：' . M()->getLastSql());
            M()->rollback();
            $this->encryptReturn($this->ERR_ARR['OPERATION_FAILED'], '登录信息更新失败，SQL：' . M()->getLastSql());
        }

        //记录日志
        $res_log = all_user_log_rec($log_title, $user_info['id'], $user_info['user_name'], $user_info['user_phone'], __METHOD__, '登录成功，NEW_TOKEN：' . $new_token, 2);
        if (1 !== $res_log['state']) {
            CommonController::logText($log_title . 'END，登录日志记录失败，MSG：' . $res_log['msg']);
            M()->rollback();
            $this->encryptReturn($this->ERR_ARR['OPERATION_FAILED'], '登录日志记录失败，MSG：' . $res_log['msg']);
        }

        //验证码置为失效
        M('all_sms_code')->where(['to_phone' =>  $this->DECRYPT_ARR['u_phone']  , 'state' => 1])->setField('state', 2);

        return [
            'state' => 1,
        ];

    }

    /**
     * 验证码检查 - 公司后台
     * Author: Sunyh
     * @param $u_phone
     * @param $v_code
     * @return bool|mixed
     */
    private function company_v_code_check($u_phone, $v_code)
    {

        //取可用验证码
        $v_code_info = M('all_sms_code')
            ->where(['to_phone' => $u_phone, 'state' => 1])
            ->order('add_time DESC')
            ->find();
        if (!(0 < count($v_code_info))) {
            return ['state' => 0, 'msg' => '手机号不存在'];
        }

        //判断验证码是否已过期
        if ($v_code_info['invalid_time'] < $this->FORMAT_TIME_NOW) {
            return ['state' => 0, 'msg' => '验证码已失效'];
        }

        //判断验证码是否输入正确
        if ($v_code != $v_code_info['sms_code']) {
            return ['state' => 0, 'msg' => '验证码错误'];
        }

        return [
            'state' => 1,
        ];
    }





}


